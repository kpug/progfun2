= Recap: Functions and Pattern Matching

빠르게 함수와 패턴매칭에 대해서 알아보자. 앞선 강의를 수강하여 대부분 알고 있겠지만 부분함수(partial functions)의 개념에 대해 추가적으로 알아야 하는 것도 있다.

=== Recap: Case Classes

Json(Javascript object notation)을 살펴보자. Json을 잘 모르면 이 예제를 보면 쉽게 이해할 수 있다.

[source,json]
----
{
  "firstName" : "John",
  "lastName" : "Smith",
  "address" : {
    "streetAddress" : "21 2nd Street",
    "state": "NY",
    "postalCode" : 10021
  },
  "phoneNumbers" : [
    { "type": "home", "number": "212 555-1234"},
    { "type": "fax", "number": "646 555-4567"}
  ]
}
----

=== Representation of JSON in Scala

scala 에서는 JSON 데이터를 이렇게 표현할 수 있다.

[source,scala]
----
abstract class JSON
case class JSeq(elems: List[JSON])            extends JSON
case class JObj(bindings: Map[String, JSON])  extends JSON
case class JNum(num: Double)                  extends JSON
case class JStr(str: String)                  extends JSON
case class JBool(b: Boolean)                  extends JSON
case object JNull                             extends JSON
----

이 케이스 클래스들로 JSON 데이터를 완벽하게 표현할 수 있다.

=== Example

앞선 JSON 데이터를 케이스 클래스를 이용해서 표현하면 아래와 같다.

[source,scala]
----
val data = JObj(Map(
  "firstName" -> JStr("John"),
  "lastName" -> JStr("Smith"),
  "address" -> JObj(Map(
    "streetAddress" -> JStr("21 2nd Street"),
    "state" -> JStr("NY"),
    "postalCode" -> JNum(10021)
    )),
  "phoneNumbers" -> JSeq(List(
    JObj(Map(
      "type" -> JStr("home"), "number" -> JStr("212 555-1234")
      )),
    JObj(Map(
      "type" -> JStr("fax"), "number" -> JStr("646 555-4567")
      ))
    ))
  ))
----

=== Pattern Matching

위의 오브젝트를 사용하여 앞서에서 살펴본 것과 같이 표현하기 위해 show 메소드를 패턴매칭으로 구현했다. 뉴라인이나 포맷팅은 없다.

json을 패턴 매칭으로 케이스별로 분기했다.

[source,scala]
----
def show(json: JSON): String = json match {
  case JSeq(elems) =>
    "[" + (elems map show mkString ", ") + "]"
  case JObj(bindings) =>
    val assocs = bindings map {
      case (key, value) => "\"" + key + "\": " + show(value)
    }
    "{" + (assocs mkString ", ") + "}"
  case JNum(num) => num.toString
  case JStr(str) => '\"' + str + '\"'
  case JBool(b) => b.toString
  case JNull => "null"
}
----

앞선 스칼라 소스 실행 결과

[source,scala]
----
res0: String = {"firstName": "John", "lastName": "Smith", "address": {"streetAddress": "21 2nd Street", "state": "NY", "postalCode": 10021.0}, "phoneNumbers": [{"type": "home", "number": "212 555-1234"}, {"type": "fax", "number": "646 555-4567"}]}
----

좀 더 자세히 살펴보자.

=== Case Blocks

What's the type of :
[source,scala]
----
case (key, value) => key + ": " + value
----

이 표현식은 typable하지 않다. 우리는 예상할 수 있는 타입으로 규정할 필요가 있다.

[source,scala]
----
type JBinding = (String, JSON)
----

=== Functions Are Objects

스칼라에서 모든 구체적인 타입은 어떤 클래스나 트레이트의 타입이다.함수 타입도 예외가 아니다.

[source,scala]
----
JBinding => String

scala.Function1[JBinding, String]
----

scala.Function1은 트레이트이고, JBinding과 String은 타입 아규먼트 이다.

=== The Function1 Trait

표준 라이브러리의 트레이트 Function1의 윤곽을 살펴보자.

[source,scala]
----
trait Function1[-A, +R] {
  def apply(x: A): R
}
----

[source,scala]
----
{ case (key, value) => key+ ": " + value}
----

위의 패턴매칭 블락은 Function1의 인스턴스로 확장하면 아래와 같다.

[source,scala]
----
new Function1[JBinding, String] {
  def apply(x: JBinding) = x match {
    case (key, value) => key + ": " + show(value)
  }
}
----

=== Subclassing Functions

트레이트가 되는 함수의 아주 좋은 점 하나는 함수 타입을 서브클래스화 할 수 있다는 것이다.

[source,scala]
----
trait Map[Key, Value] extends (Key => Value) ...
----

시퀀스(Sequences)는 Int에서 values로 가는 함수이다.

[source,scala]
----
trait Seq[Elem] extends (Int => Elem)
----

이것이 우리가 `elems(i)` 로 코드를 작성할 수 있는 이유이다.

=== Partial Matches

아래와 같은 패턴 매칭 블럭을 살펴보았다.

[source,scala]
----
{ case "ping" => "pong"}
----

String => String 의 타입으로 받을 수 있다.

[source,scala]
----
val f: String => String = { case "ping" => "pong"}
----

하지만 모든 도메인에 대해서 정의할 수는 없다. 그래서 정의된 패턴매칭 외에 값을 사용하면 매치에러가 발생한다.

[source,scala]
----
f("pong") // MatchError가 발생한다.
----

실은 이런 것도 있다.

[source,scala]
----
val f: PatialFunction1[String, String] = { case "ping" => "pong"}
f.isDefinedAt("ping")     // true
f.isDefinedAt("pong")     // false
----

부분 함수 트레이트는 아래와 같이 정의되어 있다.

[source,scala]
----
trait PatialFunction1[-A, +R] extends Function1[-A, +R] {
  def apply(x: A): R
  def isDefinedAt(x: A): R
}
----

예상된 타입이 PartialFunction 이라면 스칼라 컴파일러는 `{ case "ping" => "pong"}` 코드를 아래와 같이 확장한다.

[source,scala]
----
new PartialFunction[String, String] {
  def apply(x: String) = x match {
    case "ping" => "pong"
  }
  def isDefinedAt(x: String) = x match {
    case "ping" => true
    case _ => false
  }
}
----

=== Exercise

자 마지막으로 이 예제를 살펴보자

[source,scala]
----
val f: PartialFunction[List[Int], String] = {
  case Nil => "one"
  case x :: y :: rest => "two"
}
----

[qanda]
`f.isDefinedAt(List(1, 2, 3))` 의 결과는 무엇일까?::
  true

=== Exercise(2)

[source,scala]
----
val g: PartialFunction[List[Int], String] = {
  case Nil => "one"
  case x :: rest =>
    rest match {
      case Nil => "two"
    }
}
----

[qanda]
`g.isDefinedAt(List(1, 2, 3))` 의 결과는 무엇일까?::
  true

그럼에도 불구하고 g(List(1, 2, 3))을 수행하면 매치에러가 발생한다. 결과적으로 isDefinedAt은 매치에러가 발생하는 것에 대해서는 보장하지 못한다.
