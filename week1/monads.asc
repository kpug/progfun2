= 1.4 Monads

이번주의 마지막 강의는 Monads 이다.

=== Monads

Data structures with map and flatMap seem to be quite common.

In fact there's a name that describes this class of a data structures together with some algebraic laws that they should have.

They are called monads.

=== What is a Monad?

모나드는 flatMap, unit 2가지 연산을 가진 파라미트릭 타입 M[T]이다.

[source,scala]
----
trait M[T] {
  def flatMap[U](f: T => M[U]): M[U]
}

def unit[T](x: T): M[T]
----

여기서 flatMap은 더 일반적으로는 bind라고 부른다.

=== Examples of Monads

* List가 모나드 이면 unit(x) = List(x)
* Set이 모나드 이면 unit(x) = Set(x)
* Option이 모나드 이면 unit(x) = Some(x)
* Generator가 모나드 이면 unit(x) = single(x)

=== Monads and map

map은 모든 모나드에 flatMap과 unit의 조합으로 정의될 수 있다.

[source,scala]
----
m map f == m flatMap(x => unit(f(x)))
        == m flatMap(f andThen unit)
----

scala에서는 호출할 수 있는 unit이 없다. 왜냐하면 모든 모나드는 unit 값을 주는 다른 표현을 가지고 있기 때문이다.

=== Monad Laws

모나드이기 위해서, 타입은 아래 3가지 법칙을 만족해야 한다.

[qanda]
Associativity::
  m flatMap f flatMap g = m flatMap(x => f(x) flatMap g)
Left unit::
  unit(x) flatMap f == f(X)
Right unit::
  m flatMap unit = m

모노이드라는 개념도 나오는데, 모나드의 간단한 형태이다. 예를들어 정수형이 모노이드라면 정수형에는 결합법칙이 성립한다.

=== Checking Monad Laws

Option으로 모나트 법칙을 확인해 보자.

[source,scala]
----
abstract class Option[+T] {
  def flatMap[U](f : T => Option[U]): Option[U] = this match {
    case Some(x) => f(x)
    case None = None
  }
}
----

=== Checking the Left Unit Laws

[source,scala]
----
some(x) flatMap f == f(x)

   some(x) flatMap f

== some(x) match {
     case Some(x) => f(x)
     case None = None
   }

== f(x)
----

=== Checking the Right Unit Laws

[source,scala]
----
opt flatMap Some == opt

   opt flatMap Some

== opt match {
     case Some(x) => Some(x)
     case None = None
   }

== opt
----

=== Checking the Associative Law

[source,scala]
----
opt flatMap f flatMap g == opt flatMap (x => f(x))

   opt flatMap f flatMap g

== opt match { case Some(x) => f(x) case None => None }
       match { case Some(y) => g(y) case None => None }

== opt match {
     case Some(x) =>
       f(x) match { case Some(y) => g(y) case None => None }
     case None =>
       None  match { case Some(y) => g(y) case None => None }
}

== opt match {
     case Some(x) =>
       f(x) match { case Some(y) => g(y) case None => None }
     case None => None
   }

== opt match {
     case Some(x) => f(x) flatMap g
     case None => None
}

== opt flatMap (x => f(x) flatMap g)
----

그래서 Option은 모나드라고 할 수 있다.

=== Significance of the Laws for For-Expressions

우리는 모나드 타입의 표현식이 실제로 for 표현식으로 작성된다는 것을 보았다.

이것에 관하여 중요한 사실은 무엇일까?

1. 결합법칙은 for표현식의 중첩된 "인라인"일 수 있다.

[source,scala]
----
   for(y <- for(x <- m; y <- f(x)) yield y
       z <- g(y)) yield z

== for(x <- m;
       y <- f(x)
       z <- g(y)) yield z
----

2. Right unit은 아래와 같다.

[source,scala]
----
   for(x <- m) yield x
== m
----

3. Left unit은 for 표현식에서는 아날로그를(?) 가지지 않는다.

이는 for 표현식에서는 결합법칙과 Right unit이 더 중요하다는 것을 말해준다.

=== Another type: Try

try는 Option을 재조합한 것이다. 그러나 Some/None대신 값을 가진 Success 케이스와 exception을 포함한 Failure 케이스가 있다.

[source,scala]
----
abstract class Try[+T]
case class Success[T](x: T)       extends Try[T]
case class Failure(ex: Exception) extends Try[Nothing]
----

=== Creating a Try

[source,scala]
----
Try(expr)

object Try {
  def apply[T](expr: => T): Try[T] =
    try Success(expr)
    catch {
      case NotFatal(ex) => Failure(ex)
    }
}
----

=== Composing Try

Option처럼 Try 값 계산은 for 표현식으로 조합할 수 있다.

[source,scala]
----
for {
  x <- computeX
  y <- computeY
} yield f(x, y)
----

computeX와 computeY가 성공하면 Success(f(x, y))가 되고
실패하면 Failure(ex)가 된다.

=== Definition of flatMap and map on Try

[source,scala]
----
abstract class Try[T] {
  def flatMap[U](f: T => Try[U]): Try[U] = this match {
    case Success(x) => try f(x) catch { case NonFatal(ex) => Failure(ex)}
    case fail : Failure = fail
  }

  def map[U](f: T => U): Try[U] = this match {
    case Success(x) => Try(f(x))
    case fail: Failure => fail
  }
}


t map f == t flatMap (x => Try(f(x))
        == t flatMap (f andThen Try)
----

=== Exersice

It looks like Try might be a monad, with unit == Try.
Is it?

[ ] Yes
[ ] No, the associative law fails
[x] No, the left unit law fails
[ ] No, the right unit law fails
[ ] No, two or more monad laws fail.

=== Solution

[source,scala]
----
Try(expr) flatMap f != f(expr)
----

이런 이유로 try는 이 컨텍스트에서 한 모나드 법칙과 아주 유용한 다른 법칙을 주고 받는다.

An expression composed from 'Try', 'map', 'flatMap' will never throw a non-fatal exception

이를 'bullet-proof' 법칙이라 한다.

=== Conclusion

for 표현식은 컬렉션 이외에도 아주 유용하다.

수 많은 다른 타입에 map, flatMap, withFilter 명령을 정의할 수 있다.

예 : Generator, Option, Try

많은 타입에서 flatMap은 모나드 이다.

(; 만약 withFilter를 정의하면 이를 "monads with zero"라고 부른다.)

3개의 모나드 법칙은 library API의 유용한 디자인 가이드를 제공한다.
