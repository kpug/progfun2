= 1.2 Translation of For

이번 장에서는 for 표현식의 구현에 대해서 살펴보러 것이다.

=== For-expressions and Higher-Order Functions

for의 문법은 고차함수인 mpa, flatMap, filter와 깊은 관계가 있다.

[source,scala]
----
def mapFun[T, U](xs: List[T], f: T => U): List[U] =
  for (x <- xs) yield f(x)

def flatMap[T, U](xs: List[T], f : T => Iterable[U]): List[U] =
  for (x <- xs; y <- f(x)) yield y

def filter[T](xs: List[T], p: T => Boolean): List[T] =
  for(x <- xs if p(x)) yield x
----

=== Translation of For (1)

[source,scala]
----
for (x <- e1) yield e2

e1.map(x => e2)
----

=== Translation of For (2)

[source,scala]
----
for (x <- e1 if f; s) yield e2

for (x <- e1.withFilter(x => f); s) yield e2
----

=== Translation of For (3)

[source,scala]
----
for (x <- e1; y <- e2; s) yield e3

e1.flatMap(x => for (y <- e2; s) yield e3)
----

=== Example

[source,scala]
----
for {
  i <- 1 until n
  j <- 1 until i
  if isPrime(i + j)
} yield (i, j)

(1 until n).flatMap(i => (i until i).withFilter(j => isPrime(i+j)
    .map(j => (i, j)))
----

=== Generalization of for

for translation은 리스트, 시퀀스, 컬렉션에 한정되지 않는다.
map, flatMap, withFilter의 존재에만 오로지 기반을 둔다.

당신이 정의한 타입에서도 for문법을 사용할 수 있다.

유용한 많은 수의 for이 있다. : arrays, iterators, databases, XML data, optional values, parsers 등

=== For and Databases

예를 들어, books는 리스트가 아닐 수 있고, 어떤 서버에 저장된 데이터베이스 일 수 있다.

데이터베이스로 클라이언트가 인터페이스 하는 동안 메소드 map, flatMap, withFilter 정의하면, 우리는 데이터베이스에 질의하기 위한 for 문법을 사용할 수 있다.

이것이 스칼라 데이터베이스 커넥션 프레임워크 ScalaQuery와 Slick의 기본이다.

유사한 아이디어로 마이크로소프트의 LINQ가 있다.
