= Recap: Collections

스칼라의 컬렉션에 대해서 살펴보자.

=== Reecap: Collections

스칼라는 풍부한 컬렉션 클래스 계층을 가지고 있다.

최상단에 Iterable, 그 하위에 Seq, Set, Map이 있다.

Array와 String은 점선으로 표기했는데, 자바로부터 온 것들이며,
(;  I've drawn the line here dotted, because these cannot be by their nature, sub types of index sequence. We can't really add new super types to a Java class.)

image::./img/hierarchy.png[Hierarchy.png]

=== Recap: Collection Methods

모든 컬렉션 타입은 일반적인 메소드의 공통 집합을 공유한다.

핵심 메소드는 map, flatMap, filter, foldLeft, foldRight 이다.

=== Idealized Implementation of map on Lists

map은 아래와 같이 구현될 수 있다.

[source,scala]
----
abstract class List[+T] {
  def map[U](f: T => U): List[U] = this match {
    case x :: xs => f(x) :: xs.map(f)
    case Nil => Nil
  }
}
----

=== Idealized Implementation of flatMap on Lists

map과 flatMap은 :: 와 ++ 의 차이가 있다. :: 는 cons 메소드로 첫 머리에 이어 붙이는 것이고, ++ 은 concatenation으로 2개의 요소를 결합한다.

(; :의 메소드의 경우 결합 방향이 반대이다. 예를 들어 A + B 의 경우는 A.+(B)가 되지만 A :: B의 경우는 B.::(A) 가 된다. )

[source,scala]
----
abstract class List[+T] {
  def flatMap[U](f: T => List[U]): List[U] = this match {
    case x :: xs => f(x) ++ xs.flatMap(f)
    case Nil => Nil
  }
}
----

=== Idealized Implementation of filter on Lists

[source,scala]
----
abstract class List[+T] {
  def filter(p: T => Boolean): List[T] = this match {
    case x :: xs =>
      if(p(x)) x :: xs.filter(p) else xs.filter(p)
    case Nil => Nil
  }
}
----

실제로 map, flatMap, filter는 위의 구현과는 조금 다르다. 실제론 Iterable에 구현되어 있으며, tail-recursion을 사용하여 구현되어 있다.

=== For-Expressions

for 표현식으로 map, flatMap, filter를 표현할 수 있다.

(; 스칼라는 statement보다 expression이라는 단어를 사용하는데 이는 반환 값이 있느냐 없느냐의 차이가 있다.)

[source,scala]
----
(1 until n) flatMap (i =>
  (1 until i) filter (j => isPrime(i + j) map
    (j => (i , j)))

// 아래 처럼 사용할 수 있다.

for {
  i <- 1 until n
  j <- 1 until i
  if isPrime(i + j)
} yield (i, j)
----

=== Translation of For(1)

스칼라 컴파일러는 for 구문에 대해서 아래와 같이 map으로 변경한다.

[source,scala]
----
for (x <- e1) yield e2

e1.map(x => e2)
----

=== Translation of For(2)

[source,scala]
----
for (x <- e1 if f; s) yield e2

for(x <- e1.withFilter(x => f); s) yield e2
----

=== Translation of For(3)

[source,scala]
----
for (x <- e1; y <- e2; s) yield e3

e1.flatMap(x => for(y <- e2; s) yield e3)
----

첫 번째는 수식은 단일 제너레이터(single generator)를 제거할 수 있고, 두 번째 수식은 filter 요소를 제거할 수 있고, 세번째 수식은 포에서 이끌어주는 제너레이터(leading generator 여기서는 e1)을 제거할 수 있다.

위의 3가지 공식을 반복적으로 적용하면, 모두 공식을 변환할 수 있다.

=== For-expressions and Pattern Matching

우리가 아직 살펴보지 않은 것은 제너레이터의 left-hand side 이다.
예제를 보자.

[source,scala]
----
val data: List[JSON] = ...

for {
  JObj(bindings) <- data
  JSeq(phones) = bindings("phoneNumbers")
  JObj(phone) <- phones
  JStr(digits) = phone("number")
  if digits startWith "212"
} yield (bindings("firstName"), bindings("lastName"))
----

위의 코드를 실행하면 전화번호가 "212"로 시작하는 모든 사람의 이름과 성을 얻을 수 있다.

제너레이터에서 패턴은 암묵적인 필터처럼 동작한다.

=== Translation of Pattern Matching in For

pat이 단일 변수 x에 대한 패턴이면 우리는 이렇게 변환할 수 있다.

[source,scala]
----
pat <- expr

// 위의 코드는 아래와 같이 변환될 수 있다.

x <- expr withFilter {
    case pat => true
    case _ => false
  } map {
    case pat => x
  }
}
----

=== Exercise

[source,scala]
----
for {
  x <- 2 to N
  y <- 2 to x
  if (x % y == 0)
} yield (x, y)
----

위의 코드는 어떻게 변환 될까?

[source,scala]
----
(2 to N) flatMap (x =>
  (2 to x) withFilter (y =>
    x % y == 0) map ( y => (x ,y)))
----

[source,scala]
----
(2 to N) map (x =>
  (2 to x) flatMap(y =>
    if((x % y) == 0) (x, y)))
----
