= Queries with For

for 표현식은 임베디드 쿼리 언어 처럼 보인다. 이번 강의에서는 for 표현식과 데이터베이스 쿼리사이의 관계에 대해서 자세히 살펴본다.

=== Queries with for

for 표현은 근본적으로 데이터베이스를 위한 쿼리 언어의 일반적인 명령과 동일한다. (; SQL, XQuery 등)

예제:

[source,scala]
----
case class Book(title: String, authors: List[String])
----

=== A Mini-Database

[source,scala]
----
val books: List[Book] = List(
  Book(title   = "Structure and Interpretation of Computer Programs",
       authors = List("Abelson, Harald", "Sussman, Gerald J." )),
  Book(title   = "Introduction to Functional Programming",
      authors = List("Bird, Richard", "Wadler, Phil" )),
  Book(title   = "Effective Java",
      authors = List("Bloch, Joshua" )),
  Book(title   = "Java Puzzlers",
      authors = List("Bloch, Joshua", "Gafter, Neal" )),
  Book(title   = "Programming in Scala",
      authors = List("Odersky, Martin", "Spoon, Lex", "Venners, Bill" )))
----

=== Some Queries

작가의 이름이 "Bird"인 책의 제목을 찾으려면

[source,scala]
----
for (b <- books; a <- b.authors if a startWith "Bird,")
yield b.title
----

제목에 "Program" 단어를 가진 모든 책을 찾으려면

[source,scala]
----
for( b <- books if b.title indexOf "Program" >= 0)
yield b.title
----

=== Another Query

데이터 베이스에서 최소 2권 이상 책을 쓴 사람을 찾으려면

[source,scala]
----
for {
  b1 <- books
  b2 <- books
  if b1 != b2
  a1 <- b1.authors
  a2 <- b2.authors
  if a1 == a2
} yield a1
----

이를 실행하면 아래와 같은 결과를 얻게 된다.

res1: List[String] = List(Bloch, Joshua, Bloch, Joshua)


[qanda]
왜 결과는 2번 나올까?::
  book1과 book2가 swap되면서 2개가 조회되게 된다.

어떻게 하면 이를 회피할 수 있을까?::
  가장 간단한 방법은 if b1 != b2 블럭을 if b1.title < b2.title로 변경하는 것이다.

[source,scala]
----
for {
  b1 <- books
  b2 <- books
  if b1.title < b2.title
  a1 <- b1.authors
  a2 <- b2.authors
  if a1 == a2
} yield a1
----


=== Problem

끝난거 같은가? 아니야 작가가 3개의 책을 출판하면 어떻게 될까?

그 작가는 3번 나오게 된다.

=== Modified Query(2)

해결책 : 결과 리스트에 작가가 2번 나오는 중복을 지워야 한다.

distinct 메소드를 사용하면 된다.

[source,scala]
----
{ for {
    b1 <- books
    b2 <- books
    if b1.title < b2.title
    a1 <- b1.authors
    a2 <- b2.authors
    if a1 == a2
  } yield a1
}.distinct
----

반면에 이 문제들은 잘못된 데이터 구조로 시작한 것에 대한 신호이다. 우리가 데이터베이스의 책의 목록을 list 로 작성했음을 기억하자.

데이터베이스는 순서가 별로 중요하지 않으므로 row의 목록(List) 보다는 row의 집합(Set)이 더 낫다.

Ok, Good.
