= 1.3 Functional Random Generators

이제 for문을 사용하여 난수 값 생성기를 만들어보자.

=== Other Uses of For-Expressions

[qanda]
for 표현식은 컬렉션에만 관계가 있을까?::
  아니다. 모든 map, flatMap, withFilter의 해석만 있으면 된다.

예제: 난수 값 생성기

=== Randam Values

우리가 알고 있는 난수 생성 코드

[source,scala]
----
import java.util.Random
val rand = new Random
rand.nextInt()
----

[qanda]
booleans, strings, pairs, tuples, lists, sets, trees 처럼 다른 도메인을 위한 난수 값을 얻는 시스템적인 방법은 무엇일까?::


=== Generators

[source,scala]
----
trait Generator[+T] {
  def generate: T
}

val integers = new Generator[Int] {
  val rand = new java.util.Random
  def generate = rand.nextInt
}

val booleans = new Generator[Boolean] {
  def generate = integers.generate > 0
}

val pairs = new Generator[(Int, Int)] {
  def generate = (integers.generate, integers.generate)
}
----

=== Streamlining It

어떻게 new Generator ... 의 보일러플레이트를 제거할 수 있을까?

[source,scala]
----
val booleans = for (x <- integers) yield x >0

def pairs[T, U](t: Generator[T], u: Generator[U]) = for {
  x <- t
  y <- u
} yield(x, y)
----

컴파일러는 무엇을 확장할까? 이전 장에서 살펴봤던대로 아래와 같이 될 수 있다.

[source,scala]
----
val booleans = integers map (x => x > 0)

def pairs[T, U](t: Generator[T], u: Generator[U]) =
  t flatMap (x => u map (y => (x, y)))
----

그래서 map과 flatMap이 정의된 Generator 클래스가 있다면, 실제로 for 표현식과 함께 간편하게 사용할 수 있다.

=== Generator with map and flatMap

[source,scala]
----
trait Generator[+T] {
  self =>

  def generate: t

  def map[S](f: T => S): Generator[S] = new Generator[S] {
    def generate = f(self.generate)
  }

  def flatMap[S](f: T => Generator[S]): Generator[S] = new Generator[S] {
    def generate = f(self.generate).generate
}
----

=== The booleans Generator

[source,scala]
----
val booleans = for (x <- integers) yield x > 0

val booleans = integers map { x => x > 0 }

val booleans = new Generator[Boolean] {
  def generate = (x: Int => x > )(integers.generate)
}

val booleans = new Generator[Boolean] {
  def generate = integers.generate > 0
}
----

=== The pairs Generator

[source,scala]
----
def pairs[T, U](t: Generator[T], u: Generator[U]) = t flatMap {
  x => u map { y => (x, y)}
}

def pairs[T, U](t: Generator[T], u: Generator[U]) = t flatMap {
  x => new Generator[(T, U)]{ def generate = (x, u.generate)}
}

def pairs[T, U](t: Generator[T], u: Generator[U]) = new Generator[(T, U)] {
  def generate = (new Generator[(T, )]) {
    def generate = (t.generate, u.generate)
  }).generate
}

def pairs[T, U](t: Generator[T], u: Generator[U]) = new Generator[(T,U)] {
  def generate = (t.generate, u.generate)
}
----

=== Generator Examples

[source,scala]
----
def single[T](x: T): Generator[T] = new Generator[T] {
  def generate = x
}

def choose(lo: Int, hi: Int): Generator[Int] =
  for (x <- integers) yield lo + x % (hi - lo)

def oneOf[T](xs: T*) Generator[T] =
  for(idx, choose(0, xs.length)) yield xs(idx)
----

=== A List Generator

[source,scala]
----
def lists: Generator[List[Int]] = for {
  isEmpty <- booleans
  list <- if (isEmpty) emptyLists else nonEmptyLists
} yield list

def emptyLists = single(Nil)


def nonEmptyLists = for {
  head <- integers
  tail <- lists
} yield head :: tail
----

=== A Tree Generator

난수 Tree 객체를 생성하는 생성기를 구현할 수 있어?

[source,scala]
----
trait Tree

case class Inner(left: Tree, right: Tree) extends Tree

case class Leaf(x: Int) extends Tree

// 힌트: 트리는 leaf노드 이거나 inner 노드 이다.
----

정답

[source,scala]
----
object generators {
  println("Welcome to the Scala worksheet")

  val integers = new Generator[Int] {
    def generate = scala.util.Random.nextInt()
  }

  val booleans = integers.map(_ >= 0)

  val leafs: Generator[Leaf] = for {
    x <- integers
  } yield Leaf(x)

  val inners: Generator[Inner] = for {
    l <- trees
    r <- trees
  } yield Inner(l, r)

  def trees: Generator[Tree] = for {
    isLeaf = booleans
    tree <- if(isLeaf) leafs else inners
  } yield tree
}
----

=== Application: Random Testing

우리는 유닛 테스트에 대해서 알고 있다.

* 어떤 프로그램 함수나 사후조건을 테스트의 입력으로 하여 어떤 것을 생산한다.
* 사후조건은 예상된 결과의 프로퍼티이다.
* 프로그램이 사후조건을 만족하는지 확인한다.

[qanda]
테스트 입력 없이 할 수 있겠는가?::
  그렇다. 테스트 입력을 난수로 생산하여 할 수 있다.

=== Random Test Function

[source,scala]
----
def test[T](g: Generator[T], numTimes: Int = 100)
  (test: T => Boolean): Unit = {
    for (i <- 0 until numTimes) {
      val value = g.generate
      assert(test(value), "test failed for" + value)
    }
    println("passed " + numTimes + "tests")
  }
}

// Example usage


test(pairs(lists, lists)) {
  case (xs, ys) => (xs ++ ys).length > xs.length
}
----

[qanda]
위의 프로퍼티가 항상 수용될 수 있을까?::
  No. 두번째 리스트가 비어있는 경우 Assertion 에러가 발생한다.

=== ScalaCheck

관점을 옮겨보자. 테스트를 작성하는 대신에 고정하기 위해 추정된 프로퍼티를 작성하자.

이 아이디어는 ScalaCheck 도구로 구현되어 있다.

[source,scala]
----
forAll { (l1: List[Int], l2: List[Int]) =>
  l1.size + l2.size == (l1 ++ l2).size
}
----
