= 1.3 Lazy Evaluation

=== Lazy Evaluation
이전 장에서 살펴보았던 스트림은 불필요한 계산을 회피하여 문제를 해결하는 것을 보았다. 그러나 아주 중대한 잠재적인 성능 문제가 있다. 만약 후미가 여러번 호출되면 이에 대한 스트림은 후미가 호출될 때마다 다시 계산될 것이다.

이 문제는 후미를 재계산 하는 대신에 재사용할 결과와 처음 계산된 후미의 결과를 저장하는 것으로 회피할 수 있다.

이 최적화는 순수 함수형 언어의 표현식이 무엇인가를 계산할 때 매번 동일한 결과를 생산하기 때문에 적절해 보인다.

우리는 이 스키마를 lazy evaluation이라고 한다. (반대로 by-name evaluation은 항상 재계산하고, strict evaluation은 val정의와 일반적인 파라미터를 위한 것이다.)

=== Lazy Evaluation in Scala

하스켈은 lazy evaluation을 기본으로 사용하는 함수형 프로그래밍 언어이다.

스칼라는 몇가지 이유에서 기본으로 lazy evaluation을 사용하지 않는다.

> You could argue, well, why does Scala not do it? Well, there's one, or maybe two problems with lazy evaluation which are essentially rooted in the fact that lazy evaluation is quite unpredictable in when computations happen. And how much space they take. You could argue, in a abstract, pure functional language, it shouldn't really matter when computations happen, and that's true.

스칼라는 기본적으로 strict evaluation을 사용한다. 그러나 lazy val을 사용하여 값 정의에 lazy evaluation을 허용한다.

[source,scala]
----
lazy val x = expr
----

def x = expr도 lazy evaluation이긴 하지만(?) def의 경우는 항상 재 계산되는 반면 lazy val은 처음을 제외하고는 매번 재사용된다.

=== Exercise

아래 코드를 살펴보자.

[source,scala]
----
def expr = {
  val x = { print("x"); 1 }
  lazy val y = { print("y") 2 }
  def z = { print("z"); 3 }
  z + y + x + z + y + x
}
expr
----

이 프로그램을 실행하면 expr이 계산되면서 사이드 이팩트로 출력되는 것은 무엇일까?

- [ ] zyxzyx
- [ ] xyzz
- [ ] something else
- [x] xzyz
- [ ] zyzz

=== Lazy Vals and Streams

tail에 lazy value를 사용하여, Stream.cons를 더 효과적으로 구현할 수 있다.

[source,scala]
----
def cons[T](hd: T, tl: => Stream[T]) = new Stream[T] {
  def head = hd
  lazy val tail = tl
  ...
}
----

=== Seeing it in Action

스트림의 구현이 정말 불필요한 계산을 회피하는지 확인하기 위해, 표현식의 실행 trace를 살펴보자.

[source,scala]
----
(streamRange(1000, 10000) filter isPrime) apply 1

--> (if (1000 >= 10000) empty
     else cons(1000, streamRange(1000 + 1, 10000))
     .filter(isPrime).apply(1)

--> cons(1000, streamRange(1000 + 1, 10000))
    .filter(isPrime).apply(1)
----

=== Evaluation Trace(2)

cons(1000, streamRange(1000 + 1, 10000))을 C1으로 축약해보자.

[source,scala]
----
C1.filter(isPrime).apply(1)

--> (if (C1.isEmpty) C1
     else if (isPrime(C1.head)) cons(C1.head, C1.tail.filter(isPrime))
     else C1.tail.filter(isPrime))
     .apply(1)

--> (if (isPrime(1000)) cons(C1.head, C1.tail,filter(isPrime))
     else C1.tail.filter(isPrime))
     .apply(1)

-->> (if (false) cons(C1.head, C1.tail.filter(isPrime))
     else C1.tail.filter(isPrime))
     .apply(1)

--> C1.tail.filter(isPrime).apply(1)

-->> streamRange(1001, 10000)
     .filter(isPrime).apply(1)
----
