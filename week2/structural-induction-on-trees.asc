= Structural Induction on trees

이 번장에서는 프로그램에서 특성을 증명하는 것의 문제에 대해 살펴볼 것이다. 앞서 리스트를 살펴 보았는데 더 일반적인 데이터 구조인 트리에 대해서 살펴볼 것이다.

=== Structural Induction on trees

https://en.wikipedia.org/wiki/Structural_induction[structural induction]은 리스트에만 한정된 것이 아니다. 트리에도 적용될 수 있다.

일반적으로 귀납적 법칙은 아래와 같다.

To prove a property P(t) for all trees t of a certain type,

* show that P(l) holds for all leaves l of a tree,
* for each type of internal node t with subtrees s1, ..., sn, show that

P(s1)^ ... ^ P(sn) implies P(t)

=== Example: IntSets

[source,scala]
----
abstract class IntSet {
  def incl(x: Int): IntSets
  def contains(x: Int): Boolean
}

object Empty extends IntSet {
  def contains(x: Int): Boolean = false
  def incl(x: Int): IntSet = NonEmpty(x, Empty, Empty)
}

case class NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet {
  def contains(x: Int): Boolean =
    if (x < elem) left contains x
    else if (x > elem) right contains x
    else true

  def incl(x: Int): IntSet =
    if (x < elem) NonEmpty(elem, left incl x, right)
    else if (x > elem) NonEmpty(elem, left, right incl x)
    else this
}
----

=== The Laws of IntSet

구현의 정확함을 증명하는 것의 무엇을 의미할까?

구현의 정확함을 정의하고 보여주기 위한 한가지 방법은 법칙을 준수하는지 증명하는 것으로 이루어진다.

IntSet의 경우 아래 3가지 법칙을 가진다.

[source,scala]
----
Empty contains x = false
(s incl x) contains x = true
(s incl x) contains y = s contains y   if x != y
----

=== Proving the Laws of IntSet(1)

가정 1. Empty contains x = false

증명 : Emtpy의 contains의 정의에 따르면 false 이다.

=== Proving the Laws of IntSet(2)

가정 2. (s incl x) contains x = true

s의 structural induction에 증명에 의해

[source,scala]
----
(Empty incl x) contains x

== NonEmpty(x, Empty, Empty) contains //<1>
== true
----
<1> Empty.incl의 정의에 의해
<2> NonEmpty.contains의 정의에 의해

=== Proving the Laws of IntSet(3)

Induction step: NonEmpty(x, l, r)

[source,scala]
----
(NonEmpty(x, l, r) incl x) contains x

= NonEmpty(x, l, r) contains x //<1>
= true //<2>
----
<1> NonEmpty.incl의 정의에 의해
<2> NonEmpty.contains의 정의에 의해

=== Proving the Laws of IntSet(4)

Induction step: NonEmpty(y, l, r) where y < x

[source,scala]
----
(NonEmpty(y, l, r) incl x) contains

= NonEmpty(y, l, r incl x) contains //<1>
= (r incl x) contains x //<2>
= true //<3>
----
<1> NonEmpty.incl의 정의에 의해
<2> NonEmpty.contains의 정의에 의해
<3> induction hypothesis에 의해

Induction step: NonEmpty(y, l, r) where y > x 은 유사하다

=== Proving the Laws of IntSet(5)

가정3: If x != y then

(xs incl y) contains x = xs contains x.

structural induction의 증명에 의한 s. y < x라고 추정하면

Base case: Empty

[source,scala]
----
(Emtpy incl y) contains x //<1>
= NonEmpty(y, Empty, Empty) contains x //<2>
= Empty contains x //<3>
----
<1> Empty contains x 임을 보여주기 위해
<2> Empty.incl의 정의에 의해
<3> NonEmpty.contains의 정의에 의해

=== Proving the Laws of IntSet(6)

inductive step을 위해 트리 NonEmpty(z, l, r)을 살펴볼 필요가 있다. 5가지 경우에 대해서 살펴볼 것이다.

1. z = x
2. z = y
3. z < y < x
4. y < z < x
5. y < x < z

=== First Two Cases: z = x, z = y

이것은 쉽다.

Induction step: NonEmpty(x, l, r)

[source,scala]
----
(NonEmpty(x, l, r) incl y) contains x //<1>
= NonEmpty(x, l incl y, r) contains //<2>
= true // <3>
= NonEmpty(x, l, r) contains x
----
<1> NonEmpty(x, l, r) contains x 임을 보여주기 위해
<2> NonEmpty.incl의 정의에 의해
<3> NonEmpty.contains의 정의에 의해
<4> NonEmpty.contains의 정의에 의해

Induction step: NonEmpty(y, l, r)

[source,scala]
----
(NonEmpty(y, l, r) incl y) contains x //<1>
= NonEmpty(y, l, r) contains x //<2>
----
<1> NonEmpty(y, l, r) contains x 임을 보여주기 위해
<2> NonEmpty.incl의 정의에 의해

=== Case z < y

Induction step: NonEmpty(z, l, r) where z < y < x

[source,scala]
----
(NonEmpty(z, l, r) incl y) contains x //<1>
= NonEmpty(z, l, r incl y) contains x //<2>
= (r incl y) contains x //<3>
= r contains x //<4>
= NonEmpty(z, l, r) contains x //<5>
----
<1> NonEmpty(z, l, r) contins x 임을 보여주기 위해
<2> NonEmpty.incl의 정의에 의해
<3> NonEmpty.contains의 정의에 의해
<4> induction hypothesis에 의해
<5> NonEmpty.contains의 정의에 의해

=== Case  y < z , x

Induction step: NonEmpty(z, l, r) where y < z < x

[source,scala]
----
(NonEmpty(z, l, r) incl y) contains x //<1>
= NonEmpty(z, l incl y, r) contains x //<2>
= r contains x //<3>
= NonEmpty(z, l, r) contains x //<4>
----
<1> NonEmpty(z, l, r) contains x임을 보여주기 위해
<2> NonEmpty.incl의 정의에 의해
<3> NonEmpty.contains의 정의에 의해
<4> NonEmpty.contains의 정의에 의해

=== Case x < z

Induction step: NonEmpty(z, l, r) where y < x < z

[source,scala]
----
(NonEmpty(z, l, r) incl y) contains x //<1>
= NonEmpty(z, l incl y, r) contains x //<2>
= (l incl y) contains x //<3>
= l contains x //<4>
= NonEmpty(z, l, r) contains x //<5>
----
<1> NonEmpty(z, l, r) contains x
<2> NonEmpty.incl의 정의에 의해
<3> NonEmpty.contains의 정의에 의해
<4> induction hypothesis에 의해
<5> NonEmpty.contains의 정의에 의해

이들이 모든 경우의 수이며, 따라서 가정은 성립한다.

=== Exercise(Hard)

IntSet에 union 함수를 추가한다고 가정해보자.

[source,scala]
----
abstract class IntSet{ ...
  def union(other: IntSet): IntSet
}
object Emtpy extends IntSet { ...
  def union(other: IntSet) = other
}
object NonEmpty(x: Int, l: IntSet, r: IntSet) extends IntSet { ...
  def union(other: IntSet): IntSet = (l union (r union (other))) incl x
}
----

가정 4:

(xs union ys) contains x = xs contains x || ys contains x

xs의 structural induction을 사용하여 가정 4를 보여라.
