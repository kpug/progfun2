= 2.2 Streams

이번 세션에서는 새로운 데이터 구조인 Stream에 대해서 살펴볼 것이다. 스트림(streams)는 오직 요구가 있을 때 잘 맞춰서 평가되는 리스트 같은 것이다. 검색 문제에서 아주 우아하게 작성된다는 것을 살펴볼 수 있을 것이다.

=== Collection and Combinatorial Search

이전 장에서 communitorial search를 위한 강력한 도구를 제공하는 불변 컬렉션을 살펴보았다. 예를들어 1000과 10000 사이의 prime number를 찾고 싶다면 이 정의를 통해서 찾을 수 있다.

[source,scala]
----
((1000 to 10000) filter isPrime)(1)
----

이는 아래 재귀보다 훨씬 간결하다.

[source,scala]
----
def secondPrime(from: Int, to:Int) = nthPrime(from, to, 2)

def nthPrime(from: Int, to: Int, n: Int): Int =
  if(from >= to) throw new Error("no prime")
  else if (isPrime(from))
    if(n == 1) from else nthPrime(from + 1, to, n - 1)
    else nthPrime(from + 1, to, n)
----

=== Performance Problem

그러나 from은 성능관점에서 몹시 좋지 않다.
1000부터 10000까지 모든 prime number를 만들지만 오직 2번째 엘리먼트만 필요한 것이다.
상위 바운드를 감소시켜 속도를 올릴 수 있겠지만 두번째 prime number를 놓칠 수 있는 위험이 있다.

[source,scala]
----
((1000 to 10000) filter isPrime)(1)
----

=== Deplayed Evaluation

그래서 특별한 꼼수가 있다. 평가 결과가 필요할 때까지 시퀀스의 후미를 계산하는 것을 회피하는 것이다.

이 아이디어는 새로운 클래스에 구현되어있다. the Stream.

스트림은 리스타와 유사한 것이지만 그들의 후미는 오직 필요할 때면 평가된다.

=== Defining Streams

스트림은 Stream.empty나 Stream.cons 생성자로 부터 정의할 수 있다.

[source,scala]
----
val xs = Stream.cons(1, Stream.cons(2, Stream.emtpy))
----

이는 또한 다른 컬렉션처럼 팩토리로서 객체 Stream을 사용하여 정의할 수도 있다.

[source,scala]
----
Stream(1, 2, 3)
----

컬렉션에 toStream 메소드를 사용하면 컬렉션은 스트림으로 변한다.

[source,scala]
----
(1 to 1000). toStream
> res0: Stream[Int] = Stream(1, ?)
----

후미는 아직 평가되지 않았기 때문에 ? 로 표시된다.

=== Stream Ranges

(lo until hi).toStream을 직접 반환하는 함수를 작성해보자.

[source,scala]
----
def streamRange(lo: Int, hi: Int): Stream[Int] =
  if(lo >= hi) Stream.empty
  else Stream.cons(lo, streamRange(lo + 1, hi))
----

리스트를 생성하는 동일한 함수와 비교해 보자.

[source,scala]
----
def listRange(lo: Int, hi: Int): List[Int] =
  if(lo >= hi) Nil
  else lo :: listRange(lo + 1, hi)
----

Stream.empty는 Nil로 Stream.cons는 :: 로 변환되었다.

listRange의 경우는 1 ... 10까지 생성될 테지만 streamRange는 1..? 로 생성될 것이다.

=== Methods on Streams

Stream은 List의 거의 모든 메소드를 지원한다.

예를들어 1000부터 10000사이의 두번째 prime number를 찾기 위해 아래와 같이 할 수 있다.

[source,scala]
----
((1000 to 10000).toStream filter isPrime)(1)
----

=== Stream Cons Operator

예외적인 주요 메소드는 :: 이다.

x :: xs는 항상 리스트를 생선하고 절대 스트림을 만들지 않는다. 대신 #::를 사용하면 스트림을 생성할 수 있다.

[source,scala]
----
x #:: xs == Stream.cons(x, xs)
----

#::는 표현식일 뿐만아니라 패턴으로 사용될 수도 있다.

=== Implementation of Streams

[source,scala]
----
trait Stream[+A] extends Seq[A] {
  def isEmpty: Boolean
  def head: A
  def tail: Stream[A]
  ...
}
----

스트림의 구현은 리스트와 아주 유사하다.

=== Implementation of Streams(2)

스트림의 구체적인 구현은 Stream의 컴패니언 객체에 정의되어 있다.

[source,scala]
----
object Stream {
  def cons[T](hd: T, tl: => Stream[T]) = new Stream[T] {
    def isEmpty = false
    def head = hd
    def tail = tl
  }
  val empty = new Stream[Nothing] {
    def isEmpty = true
    def head = throw new NoSuchElementException("empty.head")
    def tail = throw new NoSuchElementException("empty.tail")
  }
}
----

Stream.emtpy는 Nil과 유사하고 Stream.cons 는 :: 와 유사하다. list와 다른 점은 by name 파라미터를 사용한다는 것이다. 이렇게 하면 실행시간에 평가된다.

=== Other Stream Methods

다른 stream의 메소드는 list의 대응관계에 있는 것과 유사하게 구현되어 있다. 예를 들어 filter는 아래와 같이 구현되어 있다.

[source,scala]
----
class Stream[+T] {
  ...
  def filter(p: T => Boolean): Stream[T] =
    if (isEmpty) this
    else if (p(head)) cons(head, tail, filter(p))
    else tail.filter(p)
}
----

=== Exercise

streamRange를 조금 수정한 아래 코드를 살펴보자.

[source,scala]
----
def streamRange(lo: Int, hi: Int): Stream[Int] {
  print(lo + " ")
  if (lo > hi) Stream.emtpy
  else Stream.cons(lo, streamRange(lo + 1, hi))
}
----

streamRange(1, 10).take(3).toList라고 했을때 우리는 어떤 결과를 얻게 되는가?

- [ ] Nothing
- [ ] 1
- [x] 1 2 3
- [ ] 1 2 3 4
- [ ] 1 2 3 4 5 6 7 8 9
