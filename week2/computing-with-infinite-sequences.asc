= 2.4 Computing with Infinite Sequences

=== Infinite Streams

우리는 첫 번째 요소만 제외하고 모든 요소를 결과가 필요할 때 계산하는 스트림에 대해서 살펴보았다.

이는 무한 스트림이 가능함을 암시한다.

예를들어 여기 주어진 숫자로부터 모든 정수형의 스트림이 있다.

[source,scala]
----
def from(n: Int): Stream[Int] = n #:: from(n+1)
----

모든 정수형 수의 스트림은 아래와 같이 구할 수 있다.

[source,scala]
----
val nats = from(0)
----

4의 배수는 아래와 같이 구할 수 있다.

[source,scala]
----
nats map (_ * 4)
----

=== The Sieve of Eratosthenes

https://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4[The Sieve of Eratosthenes(; 에라토스테네스의 체)] 는 소수를 찾는 방법. 링크 참조

* 모든 정수형은 2 부터 시작한다. 첫 번째 prime number는 2 이다.
* 모든 2의 배수를 제거한다.
* 결과 리스트의 첫 번째 요소는 소수인 3이다.
* 모든 3의 배수를 제거한다.
* 계속 반복한다. 각 단계에서 리스트의 첫 번째 요소가 소수이며, 이후 배수를 제거한다.

=== Exercise

[source,scala]
----
def sieve(s: Stream[Int]): Stream[Int] =
  s.head #:: sieve(s.tail filter (_ % s.head != 0))

val primes = sieve(from(2))
----

=== Back to Square Roots

우리의 제곱근 알고리즘은 항상 반복을 종료할 때 isGoodEnough 테스트를 사용하였다. 스트림으로 언제 종료되었는지 걱정할 것 없이 시퀀스에 집중한 표현을 할 수 있다.

[source,scala]
----
def sqrtStream(x: Double): Stream[Double] = {
  def improve(guess: Double) = (guess + x / guess) / 2
  lazy val guesses: Stream[Double] = 1 #:: (guesses map improve)
  guesses
}
----

=== Termination

물론 나중에 isGoodEnough를 추가할 수 있다.

[source,scala]
----
def isGoodEnough(guess: Dobule, x: Double) =
  math.abs((guess * guess - x) / x) < 0.0001

sqrtStream(4) filter (isGoodEnough(_, 4))
----

=== Exercise

아래에 N의 배수를 구하는 2개의 스트림이 있다.

[source,scala]
----
val xs = from(1) map (_ * N)

val ys = from(1) filter (_ % N == 0)
----

어떤 것이 결과를 생성하는게 더 빠를까?

- [x] from(1) map (_ * N)
- [ ] from(1) filter (_ % N == 0)

첫 번째 건은 각각의 요소에 3을 곱하는 것이므로 (1 * 3), (2 * 3), (3 * 3), ... 처럼 바로 처리 되지만 두번째 스트림은 1, 2, (3), 4, 5, (6) ... 처럼 불필요한 요소가 생긴다.
